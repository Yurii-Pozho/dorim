import pandas as pd
import functools
from utils import set_manufacturer_for_organization, combine_dataframes

@functools.lru_cache(maxsize=128)
def get_prices(organization):
    """Повертає ціни в залежності від вибраного представника."""
    # Визначаємо словник, де для кожної організації задані відповідні ціни.
    # Для "Stada" і "Без организации" словники поки порожні.
    prices_dict = {
        'Stada': {
            # Тут можна задати ціни для організації Stada
        },
        'Без организации': {
            # Тут можна задати ціни для організації "Без организации"
        }
    }
    # Повертаємо словник з цінами для заданої організації, або порожній словник, якщо організація не знайдена.
    return prices_dict.get(organization, {})

def process_memory_excel(file_path, organization):
    """Обробляє завантажений Excel файл і повертає оброблений DataFrame."""
    
    # =========================
    # Визначення розташування заголовків
    # =========================
    # Читаємо перші 5 рядків Excel файлу для попереднього аналізу.
    preview = pd.read_excel(file_path, nrows=5)
    
    # Перевіряємо, чи міститься в стовпцях попереднього DataFrame ключове поле "Номенклатура".
    if 'Номенклатура' in preview.columns:
        # Якщо заголовки знаходяться в першому рядку, читаємо файл, використовуючи цей рядок як заголовки.
        df = pd.read_excel(file_path, header=0)
    else:
        # Якщо заголовки починаються з 4-го рядка, пропускаємо перші 3 рядки і читаємо з 4-го рядка.
        df = pd.read_excel(file_path, skiprows=3, header=0)
    
    # =========================
    # Обробка дати
    # =========================
    # Розбиваємо значення в колонці "Дата", розділяючи рядок за пробілом,
    # і залишаємо лише першу частину, що містить дату без часу.
    df['Дата'] = df['Дата'].str.split(' ').str[0]
    
    # =========================
    # Очищення даних
    # =========================
    # Видаляємо усі колонки, де всі значення є порожніми (NaN).
    df = df.dropna(axis=1, how='all')
    
    # Видаляємо рядки, де відсутні дані в ключових колонках "Номенклатура" та "ИНН".
    df = df.dropna(subset=['Номенклатура', 'ИНН'])
    
    # =========================
    # Перетворення формату дати
    # =========================
    # Конвертуємо значення в колонці "Дата" у формат datetime за форматом "день.місяць.рік".
    df['Дата'] = pd.to_datetime(df['Дата'], format='%d.%m.%Y', dayfirst=True, errors='coerce')
    
    # =========================
    # Обробка кількості упаковок
    # =========================
    # Перейменовуємо дані з колонки "Колво упак" у нову колонку "Количество".
    df['Количество'] = df['Колво упак']
    # Видаляємо початкову колонку "Колво упак", оскільки її дані вже перенесено.
    df = df.drop(columns=['Колво упак'])
    # Перетворюємо значення в колонці "Количество" на числовий тип з обробкою помилок.
    df['Количество'] = pd.to_numeric(df['Количество'], errors='coerce')
    # Округлюємо значення у колонці "Количество".
    df['Количество'] = df['Количество'].round()
    # Фільтруємо рядки, залишаючи лише ті, де "Количество" містить валідне числове значення.
    df = df[df['Количество'].notna()]
    
    # =========================
    # Отримання цін для організації
    # =========================
    # Викликаємо функцію get_prices для отримання словника з цінами для заданої організації.
    prices = get_prices(organization)
    
    # Якщо стовпець "Цена" відсутній у DataFrame, створюємо його зі значенням None.
    if 'Цена' not in df.columns:
        df['Цена'] = None
        
    # Якщо словник з цінами не порожній, зіставляємо значення в колонці "Номенклатура" із відповідними цінами.
    # Якщо для товару не знайдено відповідну ціну, встановлюємо значення 1.
    if prices:
        df['Цена'] = df['Номенклатура'].map(prices).fillna(1)
    
    # Перетворюємо значення в колонці "Цена" на числовий тип для подальших розрахунків.
    df['Цена'] = pd.to_numeric(df['Цена'], errors='coerce')
    
    # =========================
    # Додавання порядкового номера
    # =========================
    # Додаємо нову колонку "Номер" з послідовними номерами для кожного рядка.
    df['Номер'] = range(1, len(df) + 1)
    
    # =========================
    # Оновлення інформації про виробника
    # =========================
    # Викликаємо зовнішню функцію для встановлення або оновлення даних про виробника,
    # залежно від обраної організації.
    df = set_manufacturer_for_organization(df, organization)
    
    # =========================
    # Розрахунок суми
    # =========================
    # Якщо організація "Stada", встановлюємо суму рівною 1.
    # Для інших організацій розраховуємо суму як добуток "Количество" на "Цена".
    if organization == 'Stada':
        df['Сумма'] = 1
    else:
        df['Сумма'] = df['Количество'].astype(float) * df['Цена']
    
    # =========================
    # Перевірка наявності колонки "Производитель"
    # =========================
    # Якщо стовпець "Производитель" відсутній, встановлюємо його значення за замовчуванням "Без организации".
    if 'Производитель' not in df.columns:
        df['Производитель'] = 'Без организации'
    
    # =========================
    # Перевпорядкування колонок
    # =========================
    # Оновлюємо колонку "Номер", щоб переконатися, що вона містить послідовні номери.
    df['Номер'] = range(1, len(df) + 1)
    # Формуємо новий порядок колонок так, що "Номер" буде першою колонкою, а всі інші йдуть після неї.
    columns = ['Номер'] + [col for col in df.columns if col != 'Номер']
    df = df[columns]
    
    # =========================
    # Об'єднання даних
    # =========================
    # Створюємо список з отриманим DataFrame, що дозволяє у подальшому об'єднати декілька DataFrame.
    combined_df = combine_dataframes([df])
    
    # Повертаємо остаточно оброблений DataFrame.
    return df
