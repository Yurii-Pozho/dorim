import pandas as pd
import functools
from utils import set_manufacturer_for_organization, combine_dataframes
import json

@functools.lru_cache(maxsize=128)
def get_prices(organization):
    """Повертає ціни в залежності від вибраного представника."""
    # Словник з цінами для кожної організації.
    # Кожна організація має свій вкладений словник, де ключ – назва товару,
    # а значення – відповідна ціна.
    prices_dict = {
        'Arterium': {
            "ЛАРИТИЛЕН №20 ТАБ МЯТА МАЛИНА": 24430,
            "Ларитилен таб. для рассасыв. №20 (со вкусом мяты и малины)": 24430,
            "Ларитилен таб. для рассасыв. №20 (со вкусом мяты)": 24430,
            "Тиоцетам амп.10мл№10": 94077,
            "ТИОЦЕТАМ АМП 5 МЛ №10": 70275,
            "ТИОЦЕТАМ ТАБ. 400 МГ/100 МГ №30": 52007,
            "ФОРМЭН КОМБИ БАД КАПСУЛЫ №40": 94280,
            #----------------------------------------------------------------------
            "ЛАРИТИЛЕН №20 ТАБ МЯТА ЛИМОН": 24430,
            "ЛАРИТИЛЕН ТАБ МЯТА №20": 24430,
            "РЕЗИСТОЛ КАПЛИ 50 МЛ": 84290,
            "РЕЗИСТОЛ КАПЛИ 20 МЛ": 49000,
            "ТИОТРИАЗОЛИН ФОРТЕ РАСТВОР ДЛЯ ИНЪЕКЦИЙ 50МГ/МЛ ПО 4 МЛ №10 АМП": 173532,
            "ТИОЦЕТАМ АМП 10 МЛ №10": 94077,
        },
        'Astra Zeneca': {
            "БЕТАЛОК ЗОК ТАБ 100 МГ №30": 110378,
            "БЕТАЛОК ЗОК ТАБ 25 МГ №14": 41931,
            "БРИЛИНТА ТАБ 90 МГ №56": 964270,
            "ПУЛЬМИКОРТ СУСП 0,5МГ/2МЛ №20": 313488,
            "СИМБИКОРТ ТУРБХАЛЕР ПОР.  80/4,5МКГ/60 ДОЗ №1": 245313,
            "СИМБИКОРТ ТУРБХАЛЕР ПОР. 160/4,5МКГ/60 ДОЗ №1": 282270,
            "ФОРСИГА 10 МГ №28": 523703
        },
        'Binnopharm Group': {
            "КАГОЦЕЛ ТАБЛЕТКИ 12МГ №10": 49656,
            "КАГОЦЕЛ ТАБЛЕТКИ 12МГ №20": 98908,
            "ВЕНАРУС ТАБЛЕТКИ П/О 500МГ №60": 184129,
            "ВЕНАРУС ТАБЛЕТКИ П/О 1000МГ №60": 301722,
            "ВЕНАРУС ТАБЛЕТКИ П/О 500МГ №30": 106030,
            "ВЕНАРУС ТАБЛЕТКИ П/О 1000МГ №30": 202542
        },
        'Egis': {
            "АЛЗЕПИЛ ТАБ 10 МГ №28": 373580,
            "АЛЗЕПИЛ ТАБ 5 МГ №28": 202663,
            "АЛОТЕНДИН ТАБ 10/10 МГ №30": 108460,
            "АЛОТЕНДИН ТАБ 5/10 МГ №30": 81965,
            "АЛОТЕНДИН ТАБ 5/5 МГ №30": 88915,
            "БЕТАДИН 1000 МЛ": 233927,
            "БЕТАДИН 120 МЛ": 67467,
            "БЕТАДИН 30 МЛ": 37700,
            "БЕТАДИН МАЗЬ 10% 20 Г": 48786,
            "БЕТАДИН СВЕЧИ 200 МГ №14": 86308,
            "ВЕЛАКСИН КАПС 37,5 МГ №28": 96468,
            "ВЕЛАКСИН КАПС 75 МГ №28": 198829,
            "ГРАНДАКСИН 50 МГ №20": 63172,
            "ГРАНДАКСИН 50 МГ №60": 167830,
            "КЕТИЛЕПТ ТАБ 25МГ №30": 52433,
            "КЕТИЛЕПТ ТАБ. 200 МГ №60": 578836,
            "КЛОСТИЛБЕГИТ 50 МГ №10 ТАБ.": 143890,
            "РОЗУЛИП 10 МГ №28 ТАБ.": 99961,
            "РОЗУЛИП 20 МГ №28 ТАБ.": 165831,
            "РОЗУЛИП ПЛЮС КАПС. 10/10МГ №60": 363204,
            "РОЗУЛИП ПЛЮС КАПС. 20МГ+10 МГ №60": 399343,
            "СОРБИФЕР 320 МГ №30 ТАБ.": 57203,
            "СОРБИФЕР 320 МГ №50 ТАБ.": 71509,
            "СТИМУЛОТОН 50 МГ №30": 108865,
            "СУПРАСТИН 1 МЛ №5": 34877,
            "СУПРАСТИН 25 МГ №20": 29687,
            "СУПРАСТИНЕКС 5 МГ №30 ТАБ.": 73364,
            "СУПРАСТИНЕКС 5 МГ/МЛ 20 МЛ КАПЛИ.": 70701,
            "ТАЛЛИТОН ТАБ 12,5 МГ №28": 79338,
            "ТАЛЛИТОН ТАБ 25 МГ №28": 97455,
            "ТАЛЛИТОН ТАБ 6,25 МГ №28": 60005,
            "ЛЕТИРАМ ТАБ. 500 МГ №60": 341586,
            "ЛЕТИРАМ ТАБ. 1000 МГ №60": 607518,
            "ЛЕТИРАМ ТАБ 250МГ №60": 206623,
            "ТОРВАЗИН ПЛЮС КАПС 10/10МГ №30": 127251,
            "ТОРВАЗИН ПЛЮС КАПС 20/10МГ №30": 159063     
        },
        'Stada': {
            "Тиоцетам 10мл №10": 1,
            "Тиоцетам 5мл №10": 1,
            "Тиоцетам 400мг/100мг №30 табл.": 1,
            "Уролесан 180мл": 1,
            "Уролесан 25мл": 1,
            "Элкоцин 100мг №30 табл.": 1,
            "Ларитилен №20 табл. мяты": 1,
            "Ларитилен №20 табл. мяты и малины": 1,
            "Ларитилен №20 табл.мяты и лимон": 1
        },
        'Без организации': {}
    }
    # Повертаємо словник цін для обраної організації,
    # або порожній словник, якщо організація відсутня у визначених.
    return prices_dict.get(organization, {})

def process_farm_lyuks_excel(file_path, organization):
    """Обробляє завантажений Excel файл і повертає оброблений DataFrame."""
    
    # =========================
    # Читання Excel файлу
    # =========================
    # Зчитуємо Excel файл, пропускаючи перші 3 рядки, які можуть містити непотрібну інформацію або заголовки.
    df = pd.read_excel(file_path, skiprows=3, header=0)
    
    # =========================
    # Відбір потрібних колонок
    # =========================
    # Виключаємо перший стовпець, який не потрібен для подальшої обробки.
    df = df.iloc[:, 1:]
    
    # =========================
    # Фільтрація рядків
    # =========================
    # Видаляємо рядки, де відсутня назва продукції (ключове поле для обробки)
    df = df.dropna(subset=['Наименование продукции'])
    
    # =========================
    # Перейменування колонок
    # =========================
    # Задаємо відповідність старих назв колонок новим:
    # 'Кол.' замінюється на 'Количество', а 'Дата отгрузки' на 'Дата'
    column_mapping = {
        'Кол.': 'Количество',
        'Дата отгрузки': 'Дата'
    }
    df.rename(columns=column_mapping, inplace=True)
    
    # =========================
    # Перетворення дати
    # =========================
    # Конвертуємо значення в колонці 'Дата' у формат datetime згідно з форматом "день.місяць.рік".
    df['Дата'] = pd.to_datetime(df['Дата'], format='%d.%m.%Y', dayfirst=True, errors='coerce')
    
    # =========================
    # Обробка колонок з ІНН
    # =========================
    # Функція для очищення значення ІНН:
    # - Якщо значення відсутнє, повертаємо 0.
    # - Перетворюємо значення на рядок, видаляємо коми та крапки,
    #   розбиваємо за символами "-" або "–" та видаляємо зайві пробіли.
    # - Якщо отриманий рядок містить більше 9 символів, видаляємо останній символ.
    # - Повертаємо значення як ціле число.
    def clean_inn(inn_value):
        if pd.isna(inn_value):
            return 0
        cleaned_inn = str(inn_value).replace(',', '').replace('.', '').split(r'[-–]')[0].strip()
        if len(cleaned_inn) > 9:
            cleaned_inn = cleaned_inn[:-1]
        return int(cleaned_inn)
    
    # =========================
    # Обробка колонок з ІНН або ІНН клиента
    # =========================
    if 'ИНН' in df.columns:
        # Якщо є колонка "ИНН", застосовуємо до неї функцію очищення.
        df['ИНН'] = df['ИНН'].apply(clean_inn)
    elif 'ИНН клиента' in df.columns:
        # Якщо є колонка "ИНН клиента", застосовуємо очищення, конвертуємо значення у числовий тип,
        # заповнюємо відсутні значення нулями і встановлюємо тип 'Int64'
        df['ИНН клиента'] = (
            df['ИНН клиента']
            .apply(clean_inn)
            .apply(pd.to_numeric, errors='coerce')
            .fillna(0)
            .astype('Int64')
        )
    else:
        # Якщо немає жодної з колонок "ИНН" або "ИНН клиента",
        # перевіряємо наявність колонки "Наименование покупателя".
        if 'Наименование покупателя' not in df.columns:
            raise ValueError("Не знайдено колонок 'ИНН клиента', 'ИНН' або 'Наименование покупателя'")
        
        # Спроба завантажити дані ІНН з файлу _INN.json.
        try:
            with open('_INN.json', 'r', encoding='utf-8') as f:
                inn_data = json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError("Файл _INN.json не знайдено")
        
        # Функція для отримання ІНН за назвою покупця із завантажених JSON даних.
        def get_inn_from_json(client_name):
            if pd.isna(client_name):
                return 309872412
            cleaned_name = (client_name.strip()
                            .replace('"', '')
                            .replace('`', '')
                            .replace('mas`uliyati cheklangan jamiyati', '')
                            .strip()
                           )
            return inn_data.get(cleaned_name, 309872412)
        
        # Створюємо колонку "ИНН клиента" на основі назви покупця.
        df['ИНН клиента'] = df['Наименование покупателя'].apply(get_inn_from_json)
    
    # =========================
    # Обробка кількості
    # =========================
    # Перетворюємо значення в колонці "Количество" у числовий тип з обробкою можливих помилок.
    df['Количество'] = pd.to_numeric(df['Количество'], errors='coerce')
    # Округлюємо значення у колонці "Количество".
    df['Количество'] = df['Количество'].round()
    # Фільтруємо рядки: залишаємо ті, де значення "Количество" не є NaN і не дорівнює 0.
    df = df[~df['Количество'].isna() & (df['Количество'] != 0)]
    
    # =========================
    # Обробка повернення від покупця
    # =========================
    # Якщо є колонка "Возврат от покупателя", заповнюємо відсутні значення нулями
    # і створюємо нову колонку "Количество + Возврат" як суму "Количество" та "Возврат от покупателя".
    if 'Возврат от покупателя' in df.columns:
        df['Возврат от покупателя'] = df['Возврат от покупателя'].fillna(0)
        df['Количество + Возврат'] = df['Количество'] + df['Возврат от покупателя']
    else:
        # Якщо колонки немає, встановлюємо її значення як 0 і копіюємо значення з "Количество".
        df['Возврат от покупателя'] = 0
        df['Количество + Возврат'] = df['Количество']
    
    # =========================
    # Встановлення цін
    # =========================
    # Отримуємо словник з цінами для заданої організації.
    prices = get_prices(organization)
    # За допомогою методу map призначаємо кожному товару (за назвою "Наименование продукции")
    # відповідну ціну із словника. Якщо ціна не знайдена – встановлюємо значення 1.
    df['Цена'] = df['Наименование продукции'].map(prices).fillna(1)
    # Конвертуємо значення в колонці "Цена" у числовий тип.
    df['Цена'] = pd.to_numeric(df['Цена'], errors='coerce')
    
    # =========================
    # Розрахунок суми
    # =========================
    # Розраховуємо суму залежно від обраної організації.
    # Якщо товар є у словнику цін – суму обчислюємо як добуток "Количество" на "Цена",
    # інакше – встановлюємо суму рівною 1.
    if organization == 'Stada':
        df['Сумма'] = 1
    elif organization == 'Arterium':
        df['Сумма'] = df.apply(
            lambda row: row['Количество'] * row['Цена'] if row['Наименование продукции'] in prices else 1,
            axis=1
        )
    elif organization == 'Astra Zeneca':
        df['Сумма'] = df.apply(
            lambda row: row['Количество'] * row['Цена'] if row['Наименование продукции'] in prices else 1,
            axis=1
        )
    elif organization == 'Binnopharm Group':
        df['Сумма'] = df.apply(
            lambda row: row['Количество'] * row['Цена'] if row['Наименование продукции'] in prices else 1,
            axis=1
        )
    elif organization == 'Egis':
        df['Сумма'] = df.apply(
            lambda row: row['Количество'] * row['Цена'] if row['Наименование продукции'] in prices else 1,
            axis=1
        )
    else:
        df['Сумма'] = df['Количество'].astype(float) * df['Цена']
    
    # =========================
    # Встановлення виробника
    # =========================
    # Якщо колонка "Производитель" відсутня, встановлюємо її значення за замовчуванням як "Без организации".
    if 'Производитель' not in df.columns:
        df['Производитель'] = 'Без организации'
    
    # =========================
    # Видалення підсумкових рядків
    # =========================
    # Видаляємо рядки, де будь-яке значення містить слово "ИТОГО" (незалежно від регістру),
    # оскільки ці рядки є підсумковими та не потрібні.
    df = df[~df.apply(lambda row: row.astype(str).str.contains('ИТОГО|итого', case=False).any(), axis=1)]
    
    # =========================
    # Додавання порядкового номера
    # =========================
    # Додаємо нову колонку "Номер" з послідовними номерами для кожного рядка.
    df['Номер'] = range(1, len(df) + 1)
    
    # Переставляємо колонки так, щоб "Номер" був першою колонкою, а всі інші наступали після нього.
    columns = ['Номер'] + [col for col in df.columns if col != 'Номер']
    df = df[columns]
    
    # =========================
    # Оновлення інформації про виробника
    # =========================
    # Викликаємо зовнішню функцію set_manufacturer_for_organization для оновлення або встановлення даних про виробника,
    # виходячи з обраної організації.
    df = set_manufacturer_for_organization(df, organization)
    
    # =========================
    # Об'єднання даних
    # =========================
    # Створюємо список з одним DataFrame та об'єднуємо дані за допомогою функції combine_dataframes.
    combined_df = combine_dataframes([df])
    
    # Повертаємо оброблений DataFrame.
    return df
