import pandas as pd
import functools
from utils import set_manufacturer_for_organization, combine_dataframes

@functools.lru_cache(maxsize=128)
def get_prices(organization):
    """Повертає ціни в залежності від вибраного представника."""
    # Словник з цінами для кожної організації.
    # Для "Stada" всі ціни задані як 1, а для "Без организации" словник залишається порожнім.
    prices_dict = {
        'Stada': {
            "Тиоцетам 10мл №10": 1,
            "Тиоцетам 5мл №10": 1,
            "Тиоцетам 400мг/100мг №30 табл.": 1,
            "Уролесан 180мл": 1,
            "Уролесан 25мл": 1,
            "Элкоцин 100мг №30 табл.": 1,
            "Ларитилен №20 табл. мяты": 1,
            "Ларитилен №20 табл. мяты и малины": 1,
            "Ларитилен №20 табл.мяты и лимон": 1
        },
        'Без организации': {}
    }
    # Повертаємо словник цін для вибраної організації або порожній словник, якщо організація не знайдена.
    return prices_dict.get(organization, {})

def process_curatio_excel(file_path, organization):
    """Обробляє завантажений Excel файл і повертає оброблений DataFrame."""
    
    # =========================
    # Читання Excel файлу
    # =========================
    # Зчитуємо Excel файл, пропускаючи перші 4 рядки (непотрібна інформація чи додаткові заголовки)
    # і використовуємо наступний рядок як заголовки колонок.
    df = pd.read_excel(file_path, skiprows=4, header=0)
    
    # =========================
    # Обробка дати з колонки "Дата СФ"
    # =========================
    # Розбиваємо рядки в колонці "Дата СФ" за пробілом і беремо першу частину, що містить дату без часу.
    df['Дата'] = df['Дата СФ'].str.split(' ').str[0]
    
    # Видаляємо стару колонку "Дата СФ", оскільки вона більше не потрібна після виділення дати.
    df = df.drop(columns=['Дата СФ'])
    
    # =========================
    # Очищення даних
    # =========================
    # Видаляємо всі колонки, де всі значення є порожніми (NaN).
    df = df.dropna(axis=1, how='all')
    
    # Встановлюємо власні назви колонок після очищення даних.
    # df.columns = ['Клиент', 'Город', 'Адрес', 'Номенклатура', 'ИНН', 'Количество', 'Дата']
    
    # Видаляємо рядки, де відсутні ключові значення: назва товару ("Номенклатура") або ІНН ("ИНН").
    if 'Наименование номенклатуры' in df.columns:
        df.rename(columns={'Наименование номенклатуры': 'Номенклатура'}, inplace=True)
    
    if 'Количество, упак.' in df.columns:
        df.rename(columns={'Количество, упак.': 'Количество'}, inplace=True)    
        
    df = df.dropna(subset=['Номенклатура', 'ИНН'])
    
    # =========================
    # Обробка дати
    # =========================
    # Перетворюємо значення в колонці "Дата" у формат datetime згідно з форматом "день.місяць.рік".
    df['Дата'] = pd.to_datetime(df['Дата'], format='%d.%m.%Y', dayfirst=True, errors='coerce')
    
    # =========================
    # Обробка кількості
    # =========================
    # Перетворюємо значення в колонці "Количество" на числовий тип, з обробкою помилок.
    df['Количество'] = pd.to_numeric(df['Количество'], errors='coerce')
    
    # Округлюємо значення в колонці "Количество".
    df['Количество'] = df['Количество'].round()
    
    # Фільтруємо рядки, де значення "Количество" є валідними (не NaN).
    df = df[df['Количество'].notna()] 
    
    # =========================
    # Отримання цін для організації
    # =========================
    # Викликаємо функцію get_prices для отримання словника з цінами для обраної організації.
    prices = get_prices(organization)
    
    # =========================
    # Обробка ціни
    # =========================
    # Якщо стовпець "Цена" відсутній, створюємо його і заповнюємо значенням None.
    if 'Цена' not in df.columns:
        df['Цена'] = None 
    
    # Якщо для організації визначено словник з цінами, застосовуємо його:
    # за допомогою методу map зіставляємо назву товару ("Номенклатура") зі словником цін.
    # Якщо ціна не знайдена, встановлюємо значення 1.
    if prices:
        df['Цена'] = df['Номенклатура'].map(prices).fillna(1)
    
    # Перетворюємо значення в колонці "Цена" на числовий тип для подальших обчислень.
    df['Цена'] = pd.to_numeric(df['Цена'], errors='coerce')
    
    # =========================
    # Оновлення інформації про виробника
    # =========================
    # Викликаємо зовнішню функцію set_manufacturer_for_organization для встановлення або оновлення даних про виробника.
    df = set_manufacturer_for_organization(df, organization)
    
    # =========================
    # Розрахунок суми
    # =========================
    # Якщо організація "Stada", встановлюємо суму рівною 1.
    # Інакше, обчислюємо суму як добуток "Количество" на "Цена".
    if organization == 'Stada':
        df['Сумма'] = 1
    else:
        df['Сумма'] = df['Количество'].astype(float) * df['Цена']
    
    # =========================
    # Обробка стовпця "Производитель"
    # =========================
    # Якщо стовпець "Производитель" відсутній, встановлюємо його значення за замовчуванням як "Без организации".
    if 'Производитель' not in df.columns:
        df['Производитель'] = 'Без организации'
    
    # =========================
    # Перевпорядкування колонок
    # =========================
    # Додаємо новий стовпець "Номер", що містить послідовні номери для кожного рядка, починаючи з 1.
    df['Номер'] = range(1, len(df) + 1)
    
    # Переставляємо колонки так, щоб "Номер" був першою колонкою, а інші — після нього.
    columns = ['Номер'] + [col for col in df.columns if col != 'Номер']
    df = df[columns]
    
    # =========================
    # Об'єднання даних
    # =========================
    # Створюємо список DataFrame (може містити декілька, але тут лише один) і об'єднуємо їх
    # за допомогою зовнішньої функції combine_dataframes.
    df_list = [df]
    combined_df = combine_dataframes(df_list)
    
    # Повертаємо оброблений DataFrame.
    return df
