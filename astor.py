import pandas as pd
import functools
from utils import set_manufacturer_for_organization, combine_dataframes

@functools.lru_cache(maxsize=128)
def get_prices(organization):
    """Повертає ціни в залежності від вибраного представника."""
    # Словник з цінами для кожної організації
    prices_dict = {
        'Stada': {
            # Тут можуть бути задані ціни для організації Stada
        },
        'Без организации': {
            # Тут можуть бути задані ціни для організації "Без организации"
        }
    }
    # Повертаємо словник цін для заданої організації або порожній словник, якщо організація не знайдена
    return prices_dict.get(organization, {})

def process_astor_excel(file_path, organization):
    """Обробляє завантажений Excel файл і повертає оброблений DataFrame."""
    # =========================
    # Читання файлу для виявлення заголовків
    # =========================
    # Зчитуємо перші 10 рядків Excel-файлу без заголовків для попереднього аналізу
    preview = pd.read_excel(file_path, header=None, nrows=10)
    
    # =========================
    # Визначення рядка із заголовками
    # =========================
    # Шукаємо рядок, який містить 'ИНН', що буде використовуватись як заголовок
    header_row = None
    for i, row in preview.iterrows():
        if 'ИНН' in row.values:
            header_row = i
            break

    # Якщо рядок із заголовками не знайдено, генеруємо помилку
    if header_row is None:
        raise ValueError("Не знайдено рядка із заголовками (очікується 'ИНН').")

    # =========================
    # Читання Excel-файлу із встановленими заголовками
    # =========================
    # Зчитуємо Excel-файл, використовуючи знайдений рядок як заголовок
    df = pd.read_excel(file_path, header=header_row)
    
    # Зміна назв колонок:
    # Беремо усі колонки, окрім останніх двох, і додаємо власноруч встановлені назви для останніх двох колонок:
    # 'Количество' та 'СУММ (сум)'
    df.columns = df.columns[:-2].append(pd.Index(['Количество', 'СУММ (сум)']))

    # =========================
    # Перевірка наявності необхідних стовпців
    # =========================
    # Переконуємося, що в DataFrame є стовпці 'Номенклатура' та 'ИНН'
    if 'Номенклатура' not in df.columns or 'ИНН' not in df.columns:
        raise ValueError("Відсутні необхідні стовпці: 'Номенклатура' або 'ИНН'.")
    
    # =========================
    # Фільтрація рядків
    # =========================
    # Видаляємо рядки, де відсутні значення в стовпцях 'Номенклатура' та 'ИНН'
    df = df.dropna(subset=['Номенклатура', 'ИНН'])

    # =========================
    # Обробка стовпця "Счет фактура" для отримання номера і дати
    # =========================
    # Видаляємо зайві пробіли з значень у стовпці "Счет фактура"
    df['Счет фактура'] = df['Счет фактура'].str.strip()
    
    # Витягуємо номер рахунку за допомогою регулярного виразу;
    # створюємо новий стовпець 'Счет-фактура' з отриманим номером
    df['Счет-фактура'] = df['Счет фактура'].str.extract(r'Счет-фактура\s+(\d+)')
    
    # Витягуємо дату з тексту у стовпці "Счет фактура" за допомогою регулярного виразу;
    # створюємо новий стовпець 'Дата'
    df['Дата'] = df['Счет фактура'].str.extract(r'от (\d{2}\.\d{2}\.\d{4})')
    
    # Конвертуємо отриману дату у формат datetime з форматом "день.місяць.рік"
    df['Дата'] = pd.to_datetime(df['Дата'], format='%d.%m.%Y', dayfirst=True, errors='coerce')
    
    # =========================
    # Обробка кількості
    # =========================
    # Перетворюємо стовпець 'Количество' у числовий тип; якщо не вдається, значення стають NaN
    df['Количество'] = pd.to_numeric(df['Количество'], errors='coerce')
    
    # Округлюємо значення у стовпці 'Количество'
    df['Количество'] = df['Количество'].round()
    
    # Фільтруємо рядки, де 'Количество' має дійсне числове значення (не NaN)
    df = df[df['Количество'].notna()] 

    # =========================
    # Отримання цін для організації
    # =========================
    prices = get_prices(organization)
    
    # =========================
    # Обробка стовпця "Цена"
    # =========================
    # Якщо стовпець "Цена" відсутній, створюємо його зі значенням None
    if 'Цена' not in df.columns:
        df['Цена'] = None 
    
    # Якщо для даної організації існують задані ціни, встановлюємо їх
    if prices:
        # Зіставляємо значення в стовпці 'Номенклатура' зі словником цін;
        # якщо ціна не знайдена, використовується значення 1
        df['Цена'] = df['Номенклатура'].map(prices).fillna(1)
        
        # Перетворюємо значення у стовпці 'Цена' у числовий тип
        df['Цена'] = pd.to_numeric(df['Цена'], errors='coerce')
        
    # =========================
    # Розрахунок суми та остаточне встановлення ціни
    # =========================
    if organization == 'Stada':
        # Якщо організація 'Stada', то встановлюємо значення 'Цена' та 'Сумма' рівними 1
        df['Цена'] = 1
        df['Сумма'] = 1
    else:
        # Для інших організацій:
        # 1. Створюємо маску для рядків, де 'Номенклатура' присутня в словнику цін (необов’язково використовувана далі)
        price_mask = df['Номенклатура'].isin(prices.keys())
        
        # 2. Встановлюємо ціни:
        #    Якщо товар є у словнику цін, беремо відповідну ціну; якщо ні – ставимо 1
        df['Цена'] = df['Номенклатура'].map(lambda x: prices.get(x, 1))
        
        # 3. Розраховуємо суму:
        #    Якщо товар є у словнику цін, множимо 'Количество' на 'Цена', інакше встановлюємо суму рівною 1
        df['Сумма'] = df.apply(lambda row: 
            row['Количество'] * row['Цена'] if row['Номенклатура'] in prices 
            else 1, axis=1)

    # =========================
    # Обробка стовпця "Производитель"
    # =========================
    # Якщо стовпець 'Производитель' відсутній, встановлюємо його значення за замовчуванням "Без организации"
    if 'Производитель' not in df.columns:
        df['Производитель'] = 'Без организации'
    
    # =========================
    # Видалення непотрібних колонок та перестановка стовпців
    # =========================
    # Видаляємо оригінальний стовпець "Счет фактура", оскільки його дані вже оброблені
    df = df.drop(columns=['Счет фактура'])

    # Додаємо новий стовпець "Номер" з послідовними номерами для кожного рядка
    df['Номер'] = range(1, len(df) + 1)
    
    # Переставляємо колонки так, щоб "Номер" був першим, а інші йшли далі
    columns = ['Номер'] + [col for col in df.columns if col != 'Номер']
    df = df[columns]
    
    # =========================
    # Оновлення інформації про виробника та об'єднання даних
    # =========================
    # Викликаємо функцію для оновлення інформації про виробника залежно від організації
    df = set_manufacturer_for_organization(df, organization)   
    
    # Створюємо список DataFrame'ів (у даному випадку лише один)
    df_list = [df]
    # Об'єднуємо DataFrame'и за допомогою зовнішньої функції combine_dataframes
    combined_df = combine_dataframes(df_list)

    # Повертаємо оброблений DataFrame
    return df
